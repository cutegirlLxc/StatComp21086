x<-rnorm(b,0,1.2)
y<-rnorm(b,0,1.5)
# x,y are independent.
z0<-data.frame(c(x,y))
library(RANN)
library(boot)
N<-c(b,b)
# sizes of x and y.
Tn<-function(data,index,sizes,k){
n1<-sizes[1]
n2<-sizes[2]
n<-n1+n2
z<-data[index,]
NN <- nn2(data=z, k=k+1)
block1 <- NN$nn.idx[1:n1,-1]
block2 <- NN$nn.idx[(n1+1):n,-1]
i1 <- sum(block1 <= n1)
i2 <- sum(block2 > n1)
(i1 + i2) / (k * n)
}
boot.obj <- boot(data = z0, statistic = Tn, R = 9999,
sim = "permutation", sizes = N, k=4)
ts <- c(boot.obj$t0,boot.obj$t)
power.NN <-1- mean(ts>=ts[1])
cat("the power of NN is ",power.NN)
library(energy)
p_value.energy <- eqdist.etest(z0, sizes=N, R=9999)$p.value
power.energy<-1-p_value.energy
cat("the power of energy is ",power.energy)
library(Ball)
p_value.ball = bd.test(x = x, y = y, num.permutations=9999)$p.value
power.ball<-1-p_value.ball
cat("the power of ball is ",power.ball)
set.seed(547)
# Choose normal distribution as a proposal distribution.
n<-1e4
x<-numeric(n)
x[1]<-rnorm(1,0,1) # sigma=1
k<-0
u<-runif(n)
for (l in 2:n) {
xt<-x[l-1]
y<-rnorm(1,xt)
num<-dt(y,df=1)*dnorm(xt,mean=y)
den<-dt(xt,df=1)*dnorm(y,mean=xt)
alpha<-num/den
if(u[l]<alpha)
{x[l]<-y}
else{
x[l]<-xt
k<-k+1
}
}
index<-1001:n
x_dis<-x[index]
# discarding the first 1000 of the chain.
plot(index,x_dis,type="l",col="red")
quan<-seq(0,1,.1)
decile<-qt(quan,df=1)
decile_simulation<-quantile(x_dis,quan)
cbind(decile,decile_simulation)
set.seed(254)
n<-1e4
chain_generating<-function(n,x1,sigma){
x<-numeric(n)
u<-runif(n)
x[1]<-x1
for (l in 2:n) {
xt<-x[l-1]
y<-rnorm(1,xt,sigma)
num<-dt(y,df=1)*dnorm(xt,mean=y,sigma)
den<-dt(xt,df=1)*dnorm(y,mean=xt,sigma)
alpha<-num/den
if(u[l]<alpha)
{x[l]<-y}
else{
x[l]<-xt
}
}
x # return the chain
}
# chain-generating is a function to generate a chain by m-h sampler.
n.chain<-4
# number of chains.
x0<-c(-4,-1,1,4)
n<-1e4
data<-matrix(0,nrow=n.chain,ncol = n)
data[1,]<-chain_generating(n,x0[1],1)
data[2,]<-chain_generating(n,x0[2],1)
data[3,]<-chain_generating(n,x0[3],1)
data[4,]<-chain_generating(n,x0[4],1)
psi<-t(apply(data, 1, cumsum))
for (i in 1:4) {
psi[i,]<-psi[i,]/1:n
}
GR<-function(psi,n){
psi<-as.matrix(psi)
psirow.means<-rowMeans(psi)
W<-mean(apply(psi, 1, "var"))
v.hat<-(n-1)*W/n+var(psirow.means)
R.hat<-v.hat/W
R.hat
}
n<-1e4
rhat <- rep(0, n)
b<-1e3
#for (j in (b+1):n)
#        rhat[j] <- GR(psi[,1:j],n)
#    plot(x=(b+1):n,y=rhat[(b+1):n], type="l", xlab="index", ylab="R.hat",col="blue")
# we discard the first 1000 and plot since index=1001
#    abline(h=1.2, lty=2)
# we need more than 3000 times until rhat<1.2.
rhat_dis<-rhat[b+1:n]
min(which(rhat_dis<1.2))+b
par(mfrow=c(2,2))
for (i in 1:4) {
xi<-data[i,]
plot(xi,type = "l",col="blue",ylim = c(-15,15))
}
set.seed(123)
n<-20
a<-1
b<-2
N<-1e4
data<-matrix(0,N,2)
data[1,]<-c(5,.5)
for (j in 2:N) {
y<-data[j-1,2]
data[j,1]<-rbinom(1,n,y)
x<-data[j,1]
data[j,2]<-rbeta(1,x+a,n-x+b)
}
b<-1e3+1 # discard the first 1000 of the chain.
chain<-data[b:N,]
plot(chain,xlab = "X",ylab = "Y")
chain_generating<-function(x0,y0,N,n,a,b){
data<-matrix(0,N,2)
data[1,]<-c(x0,y0)
for (j in 2:N) {
y<-data[j-1,2]
data[j,1]<-rbinom(1,n,y)
x<-data[j,1]
data[j,2]<-rbeta(1,x+a,n-x+b)
}
data
}
x0<-c(0,20,50,100)
y0<-c(.98,.6,.1,.01)
library(stableGR)
set.seed(5432)
N<-1020
a<-20
b<-30
n<-100
rhat<-numeric(N)
burn<-20
for (j in burn+1:N) {
chain1<-chain_generating(x0[1],y0[1],j,n,a,b)
chain2<-chain_generating(x0[2],y0[2],j,n,a,b)
chain3<-chain_generating(x0[3],y0[3],j,n,a,b)
chain4<-chain_generating(x0[4],y0[4],j,n,a,b)
data<-list(chain1,chain2,chain3,chain4)
rhat[j]<-stable.GR(data,multivariate = TRUE,mapping = "maxeigen")$mpsrf
}
x<-100:N
y<-rhat[100:N]
# it can be seen that even when N is not large enough,rhat is still very small.
plot(100:N,rhat[100:N])
# lambda computed by MLE.
library(stats4)
obs <- c(0.54, 0.48, 0.33, 0.43, 1.00, 1.00, 0.91, 1.00, 0.21, 0.85)
mle.lam <- function(lambda=.3) {
-(7*log(lambda) - lambda * sum(obs))
}
mle(mle.lam)@coef
# lambda computed by MLE.
library(stats4)
obs <- c(0.54, 0.48, 0.33, 0.43, 1.00, 1.00, 0.91, 1.00, 0.21, 0.85)
mle.lam <- function(lambda=.3) {
-(7*log(lambda) - lambda * sum(obs))
}
mle(mle.lam)@coef
iter<-1e2
tol <- .Machine$double.eps^0.5 #
lam <- 0.2 # the original value of lambda
lam.op <- lam + 1
for (i in 1:iter){
lam <- 10/( 3/lam + sum(obs) )
if (abs(lam - lam.op)/lam.op < tol){break}
else{lam.op <- lam}
}
lam
# the conclusion is the same as MLE
rm(list = ls())
devtools::build_vignettes()
.Last.error.trace
library(mvtnorm)
mu1<-rep(1,5)
mu2<-c(2,3,1,4,5)
sig1<-diag(1,5)
sig2<-matrix(1:25,nc=5)
x<-rmvnorm(5000,mu1,sig1)
y<-rmvnorm(5000,mu2,sig2)
sig2
sig2<-diag(3,5)
y<-rmvnorm(5000,mu2,sig2)
data<-rbind(x,y)
library(StatComp21086)
chan_poi(data,1)
data_depth(data,1)
depth_rank(data,1)
Z.t(data,1,.4)
z<-Z_stat(data,1)
plot(z,type = "l")
rm(list = ls())
mu1<-rep(,120)
mu1<-rep(1,20)
mu2<-c(1:20)
s1<-diag(2,20)
s2<-diag(1,20)
library(mvtnorm)
x<-rmvnorm(100,mu1,s1)
y<-rmvnorm(200,mu2,s2)
data<-rbind(x,y)
chan_poi(data,1)
Z_stat(data,1)
z<-Z_stat(data,1)
plot(z,type = "l")
y<-matrix(runif(2000),nc=20)
data<-rbind(x,y)
chan_poi(data,1)
Z_stat(data,1)
z<-Z_stat(data,1)
plot(z,type="l")
rm(list = ls())
library(mvtnorm)
mu<-rep(1,20)
sig<-diag(2,20)
rmvnorm(1000,mu,sig)
data<-rmvnorm(1000,mu,sig)
z<-Z_stat(data,1)
plot(z,type = "l")
x<-matrix(rnorm(2000),nc=20)
y<-matrix(runif(2000),nc=20)
data<-rbind(x,y)
z<-Z_stat(data,1)
plot(z,type = "l")
x<-matrix(runif(2000,-.1,1.1),nc=20)
data<-rbind(x,y)
z<-Z_stat(data,1)
plot(z,type = "l")
chan_poi(data,1)
x<-matrix(rnorm(300),nc=6)
y<-matrix(runif(300),nc=6)
data<-rbind(x,y)
Z.t(data,.3)
Z.t(x,1,.3)
z<-Z_stat(data,1)
plot(z,type="l",col="blue")
x<-matrix(rnorm(300,0,1),nc=6)
y<-matrix(runif(300,1,2),nc=6)
data<-rbind(x,y)
z<-Z_stat(data,1)
plot(z,type="l",col="blue")
rm(list=ls())
data1<-matrix(rnorm(3000),nc=30)
z1<-Z_stat(data1,1)
plot(z1,type="l",col="blue")
data1<-matrix(rnorm(30000),nc=30)
z1<-Z_stat(data1,1)
plot(z1,type="l",col="blue")
seq(.5,1.6,20)
seq(0,1)
seq(0,1,2)
?seq
seq(from=0.5,to=1.5,by=.05)
mu2<-seq(from=0.55,to=1.5,by=.05)
length(mu2)
diag(1:4)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1)
z<-Z_stat(data,1)
plot(z,type = 'l')
nrow(data)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(StatComp21086)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1)
set.seed(24)
library(StatComp21086)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1)
set.seed(258)
library(StatComp21086)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1)
sig2<-diag(9,8,7,rep(10,14),7,8,9)
sig2<-diag(c(9,8,7,rep(10,14),7,8,9))
sig2
set.seed(258)
library(StatComp21086)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(c(9,8,7,rep(10,14),7,8,9))
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
z<-Z_stat(data,1)
plot(z,type="l",col='blue')
chan_poi<-function(data,method){
Z<-Z_stat(data,method)
Z_abso<-abs(Z)
M<-max(Z_abso)
location<-which(Z_abso==M)
theta<-location/nrow(data)
}
chan_poi(data,1)
chan_poi<-function(data,method){
Z<-Z_stat(data,method)
Z_abso<-abs(Z)
M<-max(Z_abso)
location<-which(Z_abso==M)
theta<-location/nrow(data)
return(location,theta)
}
chan_poi(data,1)
chan_poi<-function(data,method,loc){
Z<-Z_stat(data,method)
Z_abso<-abs(Z)
M<-max(Z_abso)
location<-which(Z_abso==M)
theta<-location/nrow(data)
if(loc==1){
return(location)
}else{
return(theta)
}
}
chan_poi(data,1,1)
typeof(2)
typeof(3)
typeof(1)
class(3)
class(1:9)
set.seed(258)
library(StatComp21086)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(c(9,8,7,rep(10,14),7,8,9))
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
z<-Z_stat(data,1)
plot(z,type="l",col='blue')
chan_poi(data,1,2)
devtools::document()
devtools::document()
rm(list = ls())
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086.tar.gz',repo=NULL)
install.packages('../StatComp21086.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
library(StatComp21086)
?chan_poi
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1)
chan_poi(data,1,1)
chan_poi(data,1,2)
set.seed(258)
?chan_poi
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1,2)
set.seed(238)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(100,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1,2)
library(mvtnorm)
mu1<-rep(1,20)
sig1<-diag(10,20)
sig2<-diag(1:20)
mu2<-seq(from=0.55,to=1.5,by=.05)
x<-rmvnorm(200,mu1,sig2)
y<-rmvnorm(100,mu2,sig2)
data<-rbind(x,y)
chan_poi(data,1,2)
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
library(StatComp21086)
?chan
?chan_poi
devtools::build(vignettes=FALSE)
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
library(StatComp21086)
?chan_poi
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::install_github("zhanghfd/statcomp",
build_vignettes = TRUE, force=T)
rm(list = ls())
library(StatComp21086)
remove.packages("StatComp21086", lib="~/R/win-library/4.1")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
git init
library(StatComp21086)
devtools::build_vignettes()
.Last.error.trace
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
library(StatComp21086)
devtools::install_github("cutegirlLxc/StatComp21086",
build_vignettes = TRUE, force=T)
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::install_github("cutegirlLxc/StatComp21086",
build_vignettes = TRUE, force=T)
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::build_vignettes()
install.packages('../StatComp21086_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
